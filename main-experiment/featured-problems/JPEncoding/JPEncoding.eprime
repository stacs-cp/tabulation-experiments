language ESSENCE' 1.0

$ Translated from:
$ https://github.com/MiniZinc/minizinc-benchmarks/blob/master/jp-encoding/jp-encoding.mzn

$$$$ Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ The given byte stream
given stream : matrix indexed by [int(1..len)] of int

$$$$ End of Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$$$$ Constants $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

letting e_ascii = 0
letting e_euc_jp = 1
letting e_sjis = 2
letting e_utf8 = 3
letting e_unknown = 4

letting b_ascii = 0
letting b_euc1 = 1
letting b_euc2 = 2
letting b_sjis1_1 = 3
letting b_sjis2_1 = 4
letting b_sjis2_2 = 5
letting b_utf8_2_1 = 6
letting b_utf8_2_2 = 7
letting b_utf8_3_1 = 8
letting b_utf8_3_2 = 9
letting b_utf8_3_3 = 10
letting b_utf8_4_1 = 11
letting b_utf8_4_2 = 12
letting b_utf8_4_3 = 13
letting b_utf8_4_4 = 14
letting b_unknown = 15

$ *_score tables have -log(probability of appearance) * 10 for each encoding.

letting sjis_score = 
[
135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 57, 135, 135, 135, 135, 135,
135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
74, 135, 128, 119, 135, 100, 135, 135, 96, 96, 112, 104, 106, 92, 106, 107,
97, 92, 99, 95, 98, 106, 107, 103, 97, 101, 105, 135, 135, 111, 135, 119,
65, 46, 45, 64, 75, 74, 79, 78, 71, 74, 79, 76, 71, 79, 59, 64,
81, 78, 70, 67, 80, 81, 70, 82, 69, 81, 75, 72, 62, 60, 73, 70,
76, 79, 75, 66, 77, 75, 78, 73, 77, 43, 43, 79, 54, 68, 68, 61,
73, 67, 80, 66, 69, 53, 51, 72, 73, 68, 74, 71, 77, 80, 77, 135,
77, 28, 11, 51, 75, 73, 69, 69, 51, 47, 49, 49, 44, 49, 41, 47,
44, 48, 48, 47, 50, 46, 45, 48, 63, 76, 75, 79, 74, 68, 63, 73,
50, 67, 40, 80, 45, 79, 56, 71, 59, 42, 45, 55, 67, 49, 68, 58,
69, 53, 65, 54, 69, 45, 57, 50, 64, 60, 65, 54, 67, 44, 49, 58,
66, 47, 58, 74, 43, 47, 43, 59, 43, 45, 62, 62, 40, 45, 60, 72,
71, 69, 72, 68, 61, 80, 62, 68, 72, 68, 70, 75, 51, 66, 67, 61,
47, 56, 59, 61, 62, 53, 53, 47, 51, 43, 49, 60, 74, 60, 83, 74,
47, 47, 76, 71, 78, 82, 77, 83, 80, 81, 70, 67, 67, 135, 135, 135
]

letting eucjp_score = 
[
135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 57, 135, 135, 135, 135, 135,
135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
74, 135, 128, 119, 135, 100, 135, 135, 96, 96, 112, 104, 106, 92, 106, 107,
97, 92, 99, 95, 98, 106, 107, 103, 97, 101, 105, 135, 135, 111, 135, 119,
135, 112, 114, 100, 108, 102, 135, 113, 121, 110, 124, 135, 111, 106, 111, 111,
100, 135, 114, 109, 112, 124, 135, 135, 124, 119, 128, 128, 121, 128, 135, 135,
135, 94, 128, 102, 104, 95, 113, 97, 108, 90, 124, 124, 99, 101, 95, 90,
105, 135, 93, 99, 94, 108, 128, 113, 135, 124, 117, 135, 135, 135, 135, 135,
135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
135, 28, 41, 44, 11, 50, 45, 72, 55, 64, 57, 42, 45, 54, 65, 46,
49, 49, 51, 48, 50, 48, 54, 41, 45, 45, 52, 44, 48, 45, 49, 39,
43, 50, 51, 43, 49, 53, 40, 43, 41, 50, 34, 36, 48, 45, 38, 43,
53, 66, 62, 66, 61, 62, 49, 50, 59, 62, 62, 63, 63, 68, 50, 63,
63, 58, 46, 55, 57, 59, 58, 52, 50, 46, 49, 43, 48, 58, 63, 58,
73, 67, 46, 46, 70, 68, 58, 66, 71, 73, 72, 74, 66, 61, 58, 135
]

letting utf8_score = 
[
139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 61, 139, 139, 139, 139, 139,
139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
78, 139, 132, 123, 139, 104, 139, 139, 100, 100, 116, 108, 110, 96, 110, 111,
101, 96, 103, 99, 102, 110, 111, 107, 101, 105, 109, 139, 139, 115, 139, 139,
139, 116, 118, 104, 112, 107, 139, 117, 125, 114, 128, 139, 115, 110, 115, 115,
104, 139, 118, 113, 116, 128, 139, 139, 128, 123, 132, 132, 125, 132, 139, 139,
139, 98, 132, 107, 108, 99, 117, 101, 112, 95, 128, 128, 103, 105, 99, 94,
109, 139, 97, 103, 98, 112, 132, 117, 139, 128, 121, 139, 139, 139, 139, 139,
36, 17, 27, 51, 42, 55, 47, 54, 41, 40, 49, 38, 42, 47, 64, 48,
53, 52, 49, 45, 56, 51, 56, 46, 58, 50, 58, 52, 57, 51, 65, 46,
51, 53, 63, 48, 54, 54, 44, 48, 45, 54, 45, 46, 61, 53, 42, 47,
53, 61, 63, 57, 61, 63, 62, 62, 48, 59, 45, 53, 39, 57, 49, 57,
139, 139, 139, 132, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 118, 139,
139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
139, 139, 68, 14, 42, 36, 40, 44, 44, 47, 139, 139, 139, 139, 139, 40,
139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139
]

letting scoreSums = 
  [ sjis_score[i] + eucjp_score[i] + utf8_score[i] | i : int(1..256)]
  
$$$$ End of Constants $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$$$$ Decision Variables $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$find objective : int(0..len*(max(scoreSums)+1000))

find n_unknown : int(0..len)

find byte_status : matrix indexed by [int(1..len)] of int(b_ascii..b_unknown)
find encoding : matrix indexed by [int(1..len)] of int(e_ascii..e_unknown)
find char_start : matrix indexed by [int(1..len)] of int(0..1)

find score : matrix indexed by [int(1..len)] of int(0..(1000+max(sjis_score)+max(eucjp_score)+max(utf8_score)))

minimising sum i : int(1..len) . score[i]

$$$$ End of Decision Variables $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

such that

$ define objective function
$ objective = sum i : int(1..len) . score[i],

forAll i : int(1..len).
    score[i]=
    (encoding[i] = e_euc_jp) * eucjp_score[stream[i]+1] + 
    (encoding[i] = e_sjis) * sjis_score[stream[i]+1] + 
    (encoding[i] = e_utf8) * utf8_score[stream[i]+1] +
    (encoding[i] = e_unknown) * 1000,

$ byte_status -> encoding
forall i : int(1..len) .
  (encoding[i] = e_ascii) = (byte_status[i] = b_ascii),
  
forall i : int(1..len) .
  (encoding[i] = e_euc_jp) ->
  (byte_status[i] = b_euc1 \/ byte_status[i] = b_euc2),
    
forall i : int(1..len) .
  (encoding[i] = e_sjis) ->
  (byte_status[i] = b_sjis1_1 \/
   byte_status[i] = b_sjis2_1 \/
   byte_status[i] = b_sjis2_2),
    
forall i : int(1..len) .
  (encoding[i] = e_utf8) ->
  (byte_status[i] = b_utf8_2_1
   \/ byte_status[i] = b_utf8_2_2
   \/ byte_status[i] = b_utf8_3_1
   \/ byte_status[i] = b_utf8_3_2
   \/ byte_status[i] = b_utf8_3_3
   \/ byte_status[i] = b_utf8_4_1
   \/ byte_status[i] = b_utf8_4_2
   \/ byte_status[i] = b_utf8_4_3
   \/ byte_status[i] = b_utf8_4_4),
    
forall i : int(1..len) .
  (byte_status[i] = b_unknown) = (encoding[i] = e_unknown),

$ ASCII
forall i : int(1..len) .
  (byte_status[i] = b_ascii) -> (stream[i] < 128),
  
forall i : int(1..len) .
  (byte_status[i] = b_ascii) -> char_start[i] = 1,

$ UTF-8
$ C2-DF, 80-BF. Check this
byte_status[len] != b_utf8_2_1,
forall i : int(1..len-1) .
  (byte_status[i] = b_utf8_2_1) ->
  (194 <= stream[i] /\ stream[i] <= 223 /\ 
   128 <= stream[i+1] /\ stream[i+1] <= 191),

byte_status[1] != b_utf8_2_2,
forall i : int(2..len) .
  (byte_status[i] = b_utf8_2_2) = (byte_status[i-1] = b_utf8_2_1),
  
forall i : int(1..len) .
  (byte_status[i] = b_utf8_2_1) -> (char_start[i] = 1),
  
forall i : int(1..len) .
  (byte_status[i] = b_utf8_2_2) -> (char_start[i] = 0),

$ E0-EF, 80-BF, 80-BF
forall i : int(len-1..len) .
  byte_status[i] != b_utf8_3_1,
  
forall i : int(1..len-2) .
  (byte_status[i] = b_utf8_3_1) ->
  (224 <= stream[i] /\ stream[i] <= 239 /\
   128 <= stream[i+1] /\ stream[i+1] <= 191 /\
   128 <= stream[i+2] /\ stream[i+2] <= 191),

byte_status[1] != b_utf8_3_2,
forall i : int(2..len) .
  (byte_status[i] = b_utf8_3_2) = (byte_status[i-1] = b_utf8_3_1),
  
forall i : int(1..2) .
  byte_status[i] != b_utf8_3_3,
forall i : int(3..len) .
  (byte_status[i] = b_utf8_3_3) = (byte_status[i-2] = b_utf8_3_1),

forall i : int(1..len) .
  (byte_status[i] = b_utf8_3_1) -> (char_start[i] = 1),
  
forall i : int(1..len) .
  ((byte_status[i] = b_utf8_3_2) \/
   (byte_status[i] = b_utf8_3_3)) ->
  (char_start[i] = 0),

$ F0-F7, 80-BF, 80-BF, 80-BF
forall i : int(len-2..len) .
  byte_status[i] != b_utf8_4_1,
forall i : int(1..len-3) .
  (byte_status[i] = b_utf8_4_1) ->
  (240 <= stream[i] /\ stream[i] <= 247 /\
   128 <= stream[i+1] /\ stream[i+1] <= 191 /\
   128 <= stream[i+2] /\ stream[i+2] <= 191 /\
   128 <= stream[i+3] /\ stream[i+3] <= 191),

byte_status[1] != b_utf8_4_2,
forall i : int(2..len) .
  (byte_status[i] = b_utf8_4_2) =
  (byte_status[i-1] = b_utf8_4_1),

forall i : int(1..2) .
  byte_status[i] != b_utf8_4_3,
forall i : int(3..len) .
  (byte_status[i] = b_utf8_4_3) = (byte_status[i-2] = b_utf8_4_1),

forall i : int(1..3) .
  byte_status[i] != b_utf8_4_4,
forall i : int(4..len) .
  (byte_status[i] = b_utf8_4_4) = (byte_status[i-3] = b_utf8_4_1),

forall i : int(1..len) .
  (byte_status[i] = b_utf8_4_1) -> (char_start[i] = 1),
  
forall i : int(1..len) .
  (byte_status[i] = b_utf8_4_2 \/ byte_status[i] = b_utf8_4_3 \/
   byte_status[i] = b_utf8_4_4) ->
  (char_start[i] = 0),
  
$
$ EUC-JP (CP51932)
$ (A1-A8, AD, B0-F4, F9-FC), (A1-FE)
$
forall i : int(1..len) .
 (byte_status[i] = b_euc1) ->
 (
  ((161 <= stream[i] /\ stream[i] <= 168) \/
   (173 = stream[i]) \/
   (176 <= stream[i] /\ stream[i] <= 244) \/
   (249 <= stream[i] /\ stream[i] <= 252))
  /\
  (161 <= stream[i+1] /\ stream[i+1] <= 254)
 ),

byte_status[1] != b_euc2,
forall i : int(2..len) .
  (byte_status[i] = b_euc2) = (byte_status[i-1] = b_euc1),

forall i : int(1..len) .
  (byte_status[i] = b_euc1) -> (char_start[i] = 1),

forall i : int(1..len) .
  (byte_status[i] = b_euc2) -> (char_start[i] = 0),

$
$ SJIS
$  

$ (A1-DF)
forall i : int(1..len) .
  (byte_status[i] = b_sjis1_1) -> (161 <= stream[i] /\ stream[i] <= 223),

forall i : int(1..len) .
  (byte_status[i] = b_sjis1_1) -> (char_start[i] = 1),

$ (81-9F, E0-FC), (40-7E, 80-FC)
byte_status[len] != b_sjis2_1,
forall i : int(1..len-1) .
  (byte_status[i] = b_sjis2_1) ->
  (
   ((129 <= stream[i] /\ stream[i] <= 159) \/
    (224 <= stream[i] /\ stream[i] <= 252))
   /\
   ((64 <= stream[i+1] /\ stream[i+1] <= 126) \/
    (128 <= stream[i+1] /\ stream[i+1] <= 252))
  ),

byte_status[1] != b_sjis2_2,
forall i : int(2..len) .
  (byte_status[i] = b_sjis2_2) = (byte_status[i-1] = b_sjis2_1),

forall i : int(1..len) .
  (byte_status[i] = b_sjis2_1) -> (char_start[i] = 1),
  
forall i : int(1..len) .
  (byte_status[i] = b_sjis2_2) -> (char_start[i] = 0),

$
$ unknown
$  
forall i : int(1..len) .
  (byte_status[i] = b_unknown) -> (char_start[i] = 1),
gcc(encoding, [e_unknown], [n_unknown]),
  
true