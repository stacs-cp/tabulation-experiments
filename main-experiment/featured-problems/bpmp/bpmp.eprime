language ESSENCE' 1.0

letting ud be 0
letting lr be 8
letting fb be 16

$ which symbol positions on a cube are next to each other on the same corner
$ made by hand, there is little hope for finding a simple formula that could be used in precomputation
$ it might be divided by three with a disjunction in link_cube_and_symbols
$array[1..24,1..3] of int: pp
letting pp = [
[21,12,7],
[23,17,11],
[24,4,18],
[22,8,3],
[1,6,16],
[2,14,20],
[4,18,24],
[3,22,8],
[7,21,12],
[5,10,15],
[6,16,1],
[8,3,22],
[16,1,6],
[15,5,10],
[13,9,19],
[14,20,2],
[18,24,4],
[20,2,14],
[19,13,9],
[17,11,23],
[12,7,21],
[11,23,17],
[9,19,13],
[10,15,5]
]

find cubeAt : matrix indexed by [int(1..8)] of int(1..8)
find symAt : matrix indexed by [int(1..24)] of int(0..63)
given data : matrix indexed by [int(1..8),int(1..24)] of int(0..63)

such that allDiff(cubeAt)
,
$ party([symAt[i] | i : int(1..4)]),
$ symAt[1..4]
    ((allDiff( [(symAt[i] % 16) / 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . (((symAt[i] % 16) / 4) = ((symAt[i+1] % 16) / 4)))
  /\ (allDiff( [symAt[i] % 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i] % 4) = (symAt[i+1] % 4)))
  /\ (allDiff( [symAt[i] / 16 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i] / 16) = (symAt[i+1] / 16))))

$ party([symAt[i + 4] | i : int(1..4) ]),
$ symAt[5..8]
/\  ((allDiff( [(symAt[i + 4] % 16) / 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . (((symAt[i + 4] % 16) / 4) = ((symAt[i + 4+1] % 16) / 4)))
  /\ (allDiff( [symAt[i + 4] % 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i + 4] % 4) = (symAt[i + 4+1] % 4)))
  /\ (allDiff( [symAt[i + 4] / 16 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i + 4] / 16) = (symAt[i + 4+1] / 16))))

$ party([symAt[(i*2 - 1 + lr] | i : int(1..4) ]),
$ symAt[9,11,13,15]
/\  ((allDiff( [(symAt[i*2 - 1 + lr] % 16) / 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . (((symAt[i*2 - 1 + lr] % 16) / 4) = ((symAt[i * 2 + 1 + lr] % 16) / 4)))
  /\ (allDiff( [symAt[i*2 - 1 + lr] % 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i*2 - 1 + lr] % 4) = (symAt[i*2 + 1 + lr] % 4)))
  /\ (allDiff( [symAt[i*2 - 1 + lr] / 16 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i*2 - 1 + lr] / 16) = (symAt[i*2 + 1 + lr] / 16))))

$ party([symAt[i*2 + lr] | i : int(1..4) ]),
$ symAt[10,12,14,16]
/\  ((allDiff( [(symAt[i*2 + lr] % 16) / 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . (((symAt[i*2 + lr] % 16) / 4) = ((symAt[i*2 + lr + 2] % 16) / 4)))
  /\ (allDiff( [symAt[i*2 + lr] % 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i*2 + lr] % 4) = (symAt[i*2 + lr + 2] % 4)))
  /\ (allDiff( [symAt[i*2 + lr] / 16 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[i*2 + lr] / 16) = (symAt[i*2 + lr + 2] / 16))))

$ party([symAt[if i < 3 then i else i+2 endif + fb] | i : int(1..4) ]),
$ symAt[17,18,21,22]
/\  ((allDiff( [(symAt[[i+2,i;int(0..1)][i<3]+fb] % 16) / 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . (((symAt[[i+2,i;int(0..1)][i<3]+fb] % 16) / 4) = ((symAt[[i+1+2,i+1;int(0..1)][i+1<3]+fb] % 16) / 4)))
  /\ (allDiff( [symAt[[i+2,i;int(0..1)][i<3]+fb] % 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[[i+2,i;int(0..1)][i<3]+fb] % 4) = (symAt[[i+1+2,i+1;int(0..1)][i+1<3]+fb] % 4)))
  /\ (allDiff( [symAt[[i+2,i;int(0..1)][i<3]+fb] / 16 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[[i+2,i;int(0..1)][i<3]+fb] / 16) = (symAt[[i+1+2,i+1;int(0..1)][i+1<3]+fb] / 16))))

$ party([symAt[if i < 3 then i else i+2 endif + 2 + fb] | i : int(1..4) ])
$ symAt[19,20,23,24]
/\  ((allDiff( [(symAt[[i+2,i;int(0..1)][i<3] + 2+fb] % 16) / 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . (((symAt[[i+2,i;int(0..1)][i<3] + 2+fb] % 16) / 4) = ((symAt[[i+1+2,i+1;int(0..1)][i+1<3] + 2+fb] % 16) / 4)))
  /\ (allDiff( [symAt[[i+2,i;int(0..1)][i<3] + 2+fb] % 4 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[[i+2,i;int(0..1)][i<3] + 2+fb] % 4) = (symAt[[i+1+2,i+1;int(0..1)][i+1<3] + 2+fb] % 4)))
  /\ (allDiff( [symAt[[i+1+2,i+1;int(0..1)][i+1<3] + 2+fb] / 16 | i : int(1..4)] ) \/
      forAll i : int(1..3) . ((symAt[[i+1+2,i+1;int(0..1)][i+1<3] + 2+fb] / 16) = (symAt[[i+1+2,i+1;int(0..1)][i+1<3] + 2+fb] / 16))))

,
$ [symAt[1],symAt[17],symAt[9]],[symAt[4],symAt[20],symAt[12]],
$ [symAt[6],symAt[22],symAt[14]],[symAt[7],symAt[23],symAt[15]]
forAll i : int(1,4,6,7) .
$  link_cube_and_symbols([cubeAt[i],symAt[i+ud],symAt[i+lr],symAt[i+fb]])
exists p : int(1..24) . forAll j : int(1..3) .
data[cubeAt[i],pp[p,j]] = [symAt[i+ud],symAt[i+lr],symAt[i+fb]][j]

,
$ [symAt[2],symAt[18],symAt[10]],[symAt[3],symAt[19],symAt[11]],
$ [symAt[5],symAt[21],symAt[13]],[symAt[8],symAt[24],symAt[16]]
forAll i : int(2,3,5,8) .
$  link_cube_and_symbols([cubeAt[i],symAt[i+ud],symAt[i+fb],symAt[i+lr]])
exists p : int(1..24) . forAll j : int(1..3) .
data[cubeAt[i],pp[p,j]] = [symAt[i+ud],symAt[i+fb],symAt[i+lr]][j]

,
cubeAt[1] = 1,
cubeAt[2] < cubeAt[3],
cubeAt[2] < cubeAt[5]

$better to search on symAt first rather than cubeAt
$solve :: int_search(symAt, first_fail, indomain_min, complete) satisfy;

$array[int(1..24)] of var 0..3: colorAt = [((symAt[i] % 16) / 4) | i : int(1..24)]
$array[int(1..24)] of var 0..3: shapeAt = [(symAt[i] % 4)        | i : int(1..24)]
$array[int(1..24)] of var 0..3: fillAt  = [(symAt[i] / 16)       | i : int(1..24)]

$names (for output)
$array[1..4] of string: colorname = ["blue","red","yellow","black"]
$array[1..4] of string: fillname  = ["half","plain","empty","grid"]
$array[1..4] of string: shapename = ["triangle","circle","square","heart"]

$output [show(cubeAt), "\n", show(symAt), "\n"] ++
$       ["pos " ++ show(i) ++ ": cube " ++ show(cubeAt[i]) ++ "\n"
$       ++ "u/d:\t"++fillname[fix(fillAt[i+ud])+1]++"\t"++colorname[fix(colorAt[i+ud])+1]++"\t"++shapename[fix(shapeAt[i+ud])+1]++"\n"
$       ++ "f/b:\t"++fillname[fix(fillAt[i+fb])+1]++"\t"++colorname[fix(colorAt[i+fb])+1]++"\t"++shapename[fix(shapeAt[i+fb])+1]++"\n"
$       ++ "l/r:\t"++fillname[fix(fillAt[i+lr])+1]++"\t"++colorname[fix(colorAt[i+lr])+1]++"\t"++shapename[fix(shapeAt[i+lr])+1]++"\n"
$       | i in 1..8];%fill

$ A party is alldiff or allequal for each of the three characteristics.
$predicate party( s : matrix indexed by [int(1..4)] of int(0..63) )
$    ((allDiff( [(s[i] % 16) / 4 | i : int(1..4)] ) \/
$      forAll i : int(1..3) . (((s[i] % 16) / 4) = ((s[i+1] % 16) / 4)))
$  /\ (allDiff( [s[i] % 4 | i : int(1..4)] ) \/
$      forAll i : int(1..3) . ((s[i] % 4) = (s[i+1] % 4)))
$  /\ (allDiff( [s[i] / 16 | i : int(1..4)] ) \/
$      forAll i : int(1..3) . ((s[i] / 16) = (s[i+1] / 16))))

$Linking cube IDs with the three symbols appearing in relevant positions
$ arguments cube, cs[2..4]
$ cube selects row of data table
$ data table row is filled in with values from cs[2..4]
$predicate link_cube_and_symbols(cube : int, cs : matrix indexed by [int(1..3)] of int)

$implement linking functions with CSE
$function array[1..3] of var 0..3: fcs(s : int(0..63)) :: promise_total =
$	{ var 0..3: color;  var 0..3:shape;var 0..3: fill;
$	such that s = 4*4*fill+4*color+shape }
$	in [fill,color,shape];

$function var 0..3: color_help(array[1..3] of var 0..3: fcs) :: promise_total = fcs[2];
$function var 0..3: color(var int:symbol) ::promise_total = color_help(fcs(symbol));

$function var 0..3: fill_help(array[1..3] of var 0..3: fcs) :: promise_total = fcs[1];
$function var 0..3: fill(var int:symbol) ::promise_total = fill_help(fcs(symbol));

$function var 0..3: shape_help(array[1..3] of var 0..3: fcs) :: promise_total = fcs[3];
$function var 0..3: shape(var int:symbol) ::promise_total = shape_help(fcs(symbol));

$function 0..3: shape(int: symbol) = symbol % 4;
$function 0..3: color(int: symbol) = (symbol % 16) / 4;
$function 0..3: fill(int:symbol) = symbol / 16;
